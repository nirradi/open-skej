import { configureStore, createSlice } from "@reduxjs/toolkit";
// Define the initial state for the admin slice
const initialAdminState = {
  calendarConfig: {
    firstDayOfWeek: 0,
    firstHour: 8,
    lastHour: 22,
    smallestSlotDuration: 30,
  },
};

// Create the admin slice
const adminSlice = createSlice({
  name: "admin",
  initialState: initialAdminState,
  reducers: {
    // Define your reducers here
    setCalendarConfig: (state, action) => {
      state.calendarConfig = {
        firstDayOfWeek: action.payload.firstDayOfWeek,
        firstHour: action.payload.firstHour,
        lastHour: action.payload.lastHour,
        smallestSlotDuration: action.payload.slotsPerDay,
      };
    },
  },
});

// Export the actions generated by the slice
export const { actions: adminActions } = adminSlice;
// Define the initial state for the calendar slots slice

// the key of this map is a day and time slot, e.g. "Monday-8:00"
export type DayOfWeek = "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday";
export type SlotId = `${DayOfWeek}-${string}`;
const initialCalendarSlotsState = {
  slots: {} as Record<SlotId, string | undefined>,
};

// Create the calendar slots slice
const calendarSlotsSlice = createSlice({
  name: "calendarSlots",
  initialState: initialCalendarSlotsState,
  reducers: {
    // Define your reducers here
    setSlotUser: (
      state,
      action: {
        payload: {
          slotId: SlotId;
          userId: string;
        };
      }
    ) => {
      const { slotId, userId } = action.payload;
      state.slots[slotId] = userId;
    },
    clearSlotUser: (
      state,
      action: {
        payload: {
          slotId: SlotId;
        };
      }
    ) => {
      const { slotId } = action.payload;
      state.slots[slotId] = undefined;
    },
  },
});

// add a user information slice
const initialUserState: {
  userId: string | undefined;
  isAdmin: boolean;
} = {
  userId: undefined,
  isAdmin: false,
};

const userSlice = createSlice({
  name: "user",
  initialState: initialUserState,
  reducers: {
    setUser: (
      state,
      action: {
        payload: {
          userId: string;
          isAdmin: boolean;
        };
      }
    ) => {
      state.userId = action.payload.userId;
      state.isAdmin = action.payload.isAdmin;
    },
  },
});

// Create the Redux store
const store = configureStore({
  reducer: {
    admin: adminSlice.reducer,
    calendarSlots: calendarSlotsSlice.reducer,
    user: userSlice.reducer,
  },
});

export const { actions: calendarSlotsActions } = calendarSlotsSlice;
export const { actions: userActions } = userSlice;

// Export the state type
export type RootState = ReturnType<typeof store.getState>;

// Export the store as the default export
export default store;
